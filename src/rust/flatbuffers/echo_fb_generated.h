// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ECHOFB_ECHO_FB_H_
#define FLATBUFFERS_GENERATED_ECHOFB_ECHO_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

namespace echo_fb {

struct SingleBufferFB;
struct SingleBufferFBBuilder;

struct ListFB;
struct ListFBBuilder;

struct SingleBufferFB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SingleBufferFBBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::Vector<uint8_t> *message() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyVector(message()) &&
           verifier.EndTable();
  }
};

struct SingleBufferFBBuilder {
  typedef SingleBufferFB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message) {
    fbb_.AddOffset(SingleBufferFB::VT_MESSAGE, message);
  }
  explicit SingleBufferFBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SingleBufferFB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SingleBufferFB>(end);
    return o;
  }
};

inline flatbuffers::Offset<SingleBufferFB> CreateSingleBufferFB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message = 0) {
  SingleBufferFBBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<SingleBufferFB> CreateSingleBufferFBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *message = nullptr) {
  auto message__ = message ? _fbb.CreateVector<uint8_t>(*message) : 0;
  return echo_fb::CreateSingleBufferFB(
      _fbb,
      message__);
}

struct ListFB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ListFBBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<echo_fb::SingleBufferFB>> *messages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<echo_fb::SingleBufferFB>> *>(VT_MESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfTables(messages()) &&
           verifier.EndTable();
  }
};

struct ListFBBuilder {
  typedef ListFB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<echo_fb::SingleBufferFB>>> messages) {
    fbb_.AddOffset(ListFB::VT_MESSAGES, messages);
  }
  explicit ListFBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ListFB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ListFB>(end);
    return o;
  }
};

inline flatbuffers::Offset<ListFB> CreateListFB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<echo_fb::SingleBufferFB>>> messages = 0) {
  ListFBBuilder builder_(_fbb);
  builder_.add_messages(messages);
  return builder_.Finish();
}

inline flatbuffers::Offset<ListFB> CreateListFBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<echo_fb::SingleBufferFB>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVector<flatbuffers::Offset<echo_fb::SingleBufferFB>>(*messages) : 0;
  return echo_fb::CreateListFB(
      _fbb,
      messages__);
}

}  // namespace echo_fb

#endif  // FLATBUFFERS_GENERATED_ECHOFB_ECHO_FB_H_
