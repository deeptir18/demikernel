// automatically generated by the FlatBuffers compiler, do not modify

// @generated

#[allow(unused_imports, dead_code)]
pub mod echo_fb {

    use core::{
        cmp::Ordering,
        mem,
    };

    extern crate flatbuffers;
    use self::flatbuffers::{
        EndianScalar,
        Follow,
    };

    pub enum SingleBufferFBOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct SingleBufferFB<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SingleBufferFB<'a> {
        type Inner = SingleBufferFB<'a>;

        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> SingleBufferFB<'a> {
        pub const VT_MESSAGE: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SingleBufferFB { _tab: table }
        }

        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SingleBufferFBArgs<'args>,
        ) -> flatbuffers::WIPOffset<SingleBufferFB<'bldr>> {
            let mut builder = SingleBufferFBBuilder::new(_fbb);
            if let Some(x) = args.message {
                builder.add_message(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn message(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SingleBufferFB::VT_MESSAGE, None)
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for SingleBufferFB<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "message",
                    Self::VT_MESSAGE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct SingleBufferFBArgs<'a> {
        pub message: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for SingleBufferFBArgs<'a> {
        #[inline]
        fn default() -> Self {
            SingleBufferFBArgs { message: None }
        }
    }

    pub struct SingleBufferFBBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SingleBufferFBBuilder<'a, 'b> {
        #[inline]
        pub fn add_message(&mut self, message: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(SingleBufferFB::VT_MESSAGE, message);
        }

        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SingleBufferFBBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SingleBufferFBBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }

        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SingleBufferFB<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for SingleBufferFB<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("SingleBufferFB");
            ds.field("message", &self.message());
            ds.finish()
        }
    }
    pub enum ListFBOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ListFB<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ListFB<'a> {
        type Inner = ListFB<'a>;

        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> ListFB<'a> {
        pub const VT_MESSAGES: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ListFB { _tab: table }
        }

        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ListFBArgs<'args>,
        ) -> flatbuffers::WIPOffset<ListFB<'bldr>> {
            let mut builder = ListFBBuilder::new(_fbb);
            if let Some(x) = args.messages {
                builder.add_messages(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn messages(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SingleBufferFB<'a>>>> {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SingleBufferFB>>>>(ListFB::VT_MESSAGES, None)
        }
    }

    impl flatbuffers::Verifiable for ListFB<'_> {
        #[inline]
        fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<SingleBufferFB>>>>("messages", Self::VT_MESSAGES, false)?
     .finish();
            Ok(())
        }
    }
    pub struct ListFBArgs<'a> {
        pub messages:
            Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SingleBufferFB<'a>>>>>,
    }
    impl<'a> Default for ListFBArgs<'a> {
        #[inline]
        fn default() -> Self {
            ListFBArgs { messages: None }
        }
    }

    pub struct ListFBBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ListFBBuilder<'a, 'b> {
        #[inline]
        pub fn add_messages(
            &mut self,
            messages: flatbuffers::WIPOffset<flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<SingleBufferFB<'b>>>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ListFB::VT_MESSAGES, messages);
        }

        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ListFBBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ListFBBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }

        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ListFB<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ListFB<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ListFB");
            ds.field("messages", &self.messages());
            ds.finish()
        }
    }
} // pub mod echo_fb
